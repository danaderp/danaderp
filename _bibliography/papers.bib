---
---
@misc{watson2020systematic,
      title={A Systematic Literature Review on the Use of Deep Learning in Software Engineering Research}, 
      author={Cody Watson and Nathan Cooper and David Nader Palacio and Kevin Moran and Denys Poshyvanyk},
      year={2020},
      eprint={2009.06520},
      archivePrefix={arXiv},
      primaryClass={cs.SE}
}

@article{Moran_2020,
   title={Improving the effectiveness of traceability link recovery using hierarchical bayesian networks},
   ISBN={9781450371216},
   url={http://dx.doi.org/10.1145/3377811.3380418},
   DOI={10.1145/3377811.3380418},
   journal={Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering},
   publisher={ACM},
   author={Moran, Kevin and Palacio, David N. and Bernal-Cárdenas, Carlos and McCrystal, Daniel and Poshyvanyk, Denys and Shenefiel, Chris and Johnson, Jeff},
   year={2020},
   month={Jun}
}

@misc{palacio2019learning,
      title={Learning to Identify Security-Related Issues Using Convolutional Neural Networks}, 
      author={David N. Palacio and Daniel McCrystal and Kevin Moran and Carlos Bernal-Cárdenas and Denys Poshyvanyk and Chris Shenefiel},
      year={2019},
      eprint={1908.00614},
      archivePrefix={arXiv},
      primaryClass={cs.SE}
}

@inproceedings{10.1145/3205651.3208294,
	author = {Nader-Palacio, David and Rodr\'{\i}guez-C\'{a}rdenas, Daniel and Gomez, Jonatan},
	title = {Assessing Single-Objective Performance Convergence and Time Complexity for Refactoring Detection},
	year = {2018},
	isbn = {9781450357647},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/3205651.3208294},
	doi = {10.1145/3205651.3208294},
	abstract = {The automatic detection of refactoring recommendations has been tackled in prior optimization
	studies involving bad code smells, semantic coherence and importance of classes; however,
	such studies informally addressed formalisms to standardize and replicate refactoring
	models. We propose to assess the refactoring detection by means of performance convergence
	and time complexity. Since the reported approaches are difficult to reproduce, we
	employ an Artificial Refactoring Generation (ARGen) as a formal and naive computational
	solution for the Refactoring Detection Problem. ARGen is able to detect massive refactoring's
	sets in feasible areas of the search space. We used a refactoring formalization to
	adapt search techniques (Hill Climbing, Simulated Annealing and Hybrid Adaptive Evolutionary
	Algorithm) that assess the performance and complexity on three open software systems.
	Combinatorial techniques are limited in solving the Refactoring Detection Problem
	due to the relevance of developers' criteria (human factor) when designing reconstructions.
	Without performance convergence and time complexity analysis, a software empirical
	analysis that utilizes search techniques is incomplete.},
	booktitle = {Proceedings of the Genetic and Evolutionary Computation Conference Companion},
	pages = {1606–1613},
	numpages = {8},
	keywords = {combinatorial optimization, mathematical software performance, refactoring, software maintenance},
	location = {Kyoto, Japan},
	series = {GECCO '18}
}